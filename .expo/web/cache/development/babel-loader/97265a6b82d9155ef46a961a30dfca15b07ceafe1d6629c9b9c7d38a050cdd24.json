{"ast":null,"code":"import { LOAD_PARA, LOAD_JOB, INITIALIZE, SETLANGUAGE, SETWORKTYPE } from \"./type\";\nimport DataFetchService from \"../services/dataFetchService\";\nimport globalconst from \"../constant/globalvariables\";\nexport var initialize = function initialize(languages) {\n  return function (dispatch) {};\n};\nexport var getParagraph = function getParagraph(argObject) {\n  return function (dispatch) {\n    return DataFetchService.getParagraph({\n      selectedWorkType: argObject.selectedWorkType,\n      selectedLanguage: argObject.selectedLanguage,\n      alreadyExists: argObject.alreadyExists,\n      url: argObject.url\n    }).then(function (response) {\n      if (response.status === 200) {\n        dispatch({\n          type: LOAD_PARA,\n          payload: {\n            data: response.data,\n            selectedLanguage: argObject.selectedLanguage,\n            selectedWorkType: \"Pending\",\n            alreadyExists: argObject.alreadyExists,\n            url: argObject.url\n          }\n        });\n      }\n      Promise.resolve();\n      return response;\n    }, function (error) {});\n  };\n};\nexport var setSelectedLanguage = function setSelectedLanguage(argObject) {\n  return function (dispatch) {\n    return DataFetchService.getParagraph(argObject).then(function (response) {\n      if (response.status === 200) {\n        dispatch({\n          type: SETLANGUAGE,\n          payload: {\n            selectedLanguage: argObject.selectedLanguage,\n            selectedWorkType: argObject.selectedWorkType,\n            data: response.data,\n            alreadyExists: argObject.alreadyExists,\n            url: argObject.url\n          }\n        });\n      }\n      Promise.resolve();\n      return response;\n    }, function (error) {});\n  };\n};\nexport var setWorkType = function setWorkType(argObject) {\n  return function (dispatch) {\n    return DataFetchService.getParagraph(argObject).then(function (response) {\n      if (response.status === 200) {\n        dispatch({\n          type: SETWORKTYPE,\n          payload: {\n            selectedLanguage: argObject.selectedLanguage,\n            selectedWorkType: argObject.selectedWorkType,\n            data: response.data,\n            url: argObject.url\n          }\n        });\n      }\n      Promise.resolve();\n      return response;\n    }, function (error) {\n      Promise.reject();\n      return error;\n    });\n  };\n};","map":{"version":3,"names":["LOAD_PARA","LOAD_JOB","INITIALIZE","SETLANGUAGE","SETWORKTYPE","DataFetchService","globalconst","initialize","languages","dispatch","getParagraph","argObject","selectedWorkType","selectedLanguage","alreadyExists","url","then","response","status","type","payload","data","Promise","resolve","error","setSelectedLanguage","setWorkType","reject"],"sources":["C:/Users/vinee/Desktop/BhaashadanWithUserManagement/Bhaashadan/src/actions/fetch.js"],"sourcesContent":["import { LOAD_PARA,LOAD_JOB,INITIALIZE,SETLANGUAGE, SETWORKTYPE } from \"./type\";\r\nimport DataFetchService from \"../services/dataFetchService\";\r\nimport globalconst from \"../constant/globalvariables\";\r\nexport const initialize=(languages)=>(dispatch)=>{\r\n  /*  dispatch({\r\n        type: INITIALIZE,\r\n        payload: languages \r\n      })\r\n      */\r\n}\r\n/*\r\nexport const getJob = (oldState,workType,selectedLanguageIndex) => (dispatch) => {\r\n  return DataFetchService.getJob(oldState,workType,selectedLanguageIndex).then(\r\n    (response) => {\r\n     // alert(JSON.stringify(response));\r\n      if (response.status===200) {\r\n        const user=response.data.user;\r\n        //alert(JSON.stringify(user));\r\n        dispatch({\r\n          type: LOAD_JOB,\r\n          payload: response \r\n        });\r\n      }\r\n  \r\n        Promise.resolve();\r\n        return response;\r\n\r\n      }\r\n    ,\r\n    (error) => {\r\nPromise.reject();\r\n\r\n      return error;\r\n    }\r\n  );\r\n};\r\n*/\r\n//export const getParagraph = (workType,selectedLanguageKey) => (dispatch) => {\r\n  export const getParagraph = (argObject) => (dispatch) => {\r\n    return DataFetchService.getParagraph({selectedWorkType:argObject.selectedWorkType,selectedLanguage:argObject.selectedLanguage,alreadyExists:argObject.alreadyExists,url:argObject.url}).then(\r\n      (response) => {\r\n       // alert(JSON.stringify(response));\r\n        \r\n        if (response.status===200) {\r\n        //  const user=response.data.user;\r\n         // alert(JSON.stringify(user));\r\n        // const languages=getLanguages(oldState,workType,selectedLanguageIndex,response);\r\n          dispatch({\r\n            type: LOAD_PARA,\r\n            payload: {data:response.data,selectedLanguage:argObject.selectedLanguage,selectedWorkType:\"Pending\",alreadyExists:argObject.alreadyExists,url:argObject.url}\r\n            \r\n          });\r\n        }\r\n\r\n          Promise.resolve();\r\n          return response;\r\n  \r\n        }\r\n      ,\r\n      (error) => {\r\n \r\n  //Promise.reject();\r\n  \r\n        //return error;\r\n      }\r\n    );\r\n  };\r\n  export const setSelectedLanguage = (argObject) => (dispatch) => {\r\n    return DataFetchService.getParagraph(argObject).then(\r\n      (response) => {\r\n        \r\n        \r\n        if (response.status===200) {\r\n         // alert(JSON.stringify(response));\r\n        //  const user=response.data.user;\r\n         // alert(JSON.stringify(user));\r\n        // const languages=getLanguages(oldState,workType,selectedLanguageIndex,response);\r\n          dispatch({\r\n            type: SETLANGUAGE,\r\n            payload: {selectedLanguage:argObject.selectedLanguage,selectedWorkType:argObject.selectedWorkType,data:response.data,alreadyExists:argObject.alreadyExists,url:argObject.url}\r\n          });\r\n        }\r\n\r\n          Promise.resolve();\r\n          return response;\r\n  \r\n        }\r\n      ,\r\n      (error) => {\r\n \r\n  //Promise.reject();\r\n  \r\n        //return error;\r\n      }\r\n    );\r\n  };\r\n  /*\r\n  export const setSelectedLanguage = (argObject) => (dispatch) => {\r\n  dispatch({\r\n    type: SETLANGUAGE,\r\n    payload: {lanIndex:argObject.lanindex,workType:\"Pending\",results:[]}\r\n  });\r\n\r\n}\r\n*/\r\n//export const setWorkType = (argObject) => (dispatch) => {\r\n  export const setWorkType = (argObject) => (dispatch) => {\r\n    return DataFetchService.getParagraph(argObject).then(\r\n      (response) => {\r\n        \r\n        \r\n        if (response.status===200) {\r\n       //   alert(JSON.stringify(response));\r\n        //  const user=response.data.user;\r\n         // alert(JSON.stringify(user));\r\n        // const languages=getLanguages(oldState,workType,selectedLanguageIndex,response);\r\n          dispatch({\r\n            type: SETWORKTYPE,\r\n            payload: {selectedLanguage:argObject.selectedLanguage,selectedWorkType:argObject.selectedWorkType,data:response.data,url:argObject.url}\r\n          });\r\n        }\r\n\r\n          Promise.resolve();\r\n          return response;\r\n  \r\n        }\r\n      ,\r\n      (error) => {\r\n \r\n  Promise.reject();\r\n  \r\n        return error;\r\n      }\r\n    );\r\n  };\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}