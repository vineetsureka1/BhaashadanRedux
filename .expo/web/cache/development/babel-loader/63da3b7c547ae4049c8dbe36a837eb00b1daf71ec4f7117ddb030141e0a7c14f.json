{"ast":null,"code":"import { LOAD_PARA, LOAD_JOB, INITIALIZE, SETLANGUAGE, SETWORKTYPE } from \"./type\";\nimport DataFetchService from \"../services/dataFetchService\";\nexport var initialize = function initialize(languages) {\n  return function (dispatch) {};\n};\nexport var getJob = function getJob(oldState, workType, selectedLanguageIndex) {\n  return function (dispatch) {\n    return DataFetchService.getJob(oldState, workType, selectedLanguageIndex).then(function (response) {\n      alert(JSON.stringify(response));\n      if (response.status === 200) {\n        var user = response.data.user;\n        alert(JSON.stringify(user));\n        dispatch({\n          type: LOAD_JOB,\n          payload: response\n        });\n      }\n      Promise.resolve();\n      return response;\n    }, function (error) {\n      Promise.reject();\n      return error;\n    });\n  };\n};\nexport var getParagraph = function getParagraph() {\n  return function (dispatch) {\n    return DataFetchService.getParagraph().then(function (response) {\n      alert(JSON.stringify(response));\n      if (response.status === 200) {\n        dispatch({\n          type: LOAD_PARA,\n          payload: {\n            results: response.data.results\n          }\n        });\n      }\n      Promise.resolve();\n      return response;\n    }, function (error) {});\n  };\n};\nexport var setSelectedLanguage = function setSelectedLanguage(argObject) {\n  return function (dispatch) {\n    return DataFetchService.getParagraph(argObject.results, argObject.workType, \"bangla\").then(function (response) {\n      if (response.status === 200) {\n        alert(JSON.stringify(response));\n        dispatch({\n          type: SETLANGUAGE,\n          payload: {\n            selectedLanguage: argObject.selectedLanguage,\n            selectedWorkType: argObject.selectedWorkType,\n            results: [1, 2, 3]\n          }\n        });\n      }\n      Promise.resolve();\n      return response;\n    }, function (error) {});\n  };\n};\nexport var setWorkType = function setWorkType(argObject) {\n  return function (dispatch) {\n    dispatch({\n      type: SETWORKTYPE,\n      payload: {\n        index: argObject.workType\n      }\n    });\n  };\n};","map":{"version":3,"names":["LOAD_PARA","LOAD_JOB","INITIALIZE","SETLANGUAGE","SETWORKTYPE","DataFetchService","initialize","languages","dispatch","getJob","oldState","workType","selectedLanguageIndex","then","response","alert","JSON","stringify","status","user","data","type","payload","Promise","resolve","error","reject","getParagraph","results","setSelectedLanguage","argObject","selectedLanguage","selectedWorkType","setWorkType","index"],"sources":["C:/Users/vinee/Desktop/BhaashadanWithUserManagement/Bhaashadan/src/actions/fetch.js"],"sourcesContent":["import { LOAD_PARA,LOAD_JOB,INITIALIZE,SETLANGUAGE, SETWORKTYPE } from \"./type\";\r\nimport DataFetchService from \"../services/dataFetchService\";\r\nexport const initialize=(languages)=>(dispatch)=>{\r\n  /*  dispatch({\r\n        type: INITIALIZE,\r\n        payload: languages \r\n      })\r\n      */\r\n}\r\n\r\nexport const getJob = (oldState,workType,selectedLanguageIndex) => (dispatch) => {\r\n  return DataFetchService.getJob(oldState,workType,selectedLanguageIndex).then(\r\n    (response) => {\r\n      alert(JSON.stringify(response));\r\n      if (response.status===200) {\r\n        const user=response.data.user;\r\n        alert(JSON.stringify(user));\r\n        dispatch({\r\n          type: LOAD_JOB,\r\n          payload: response \r\n        });\r\n      }\r\n  \r\n        Promise.resolve();\r\n        return response;\r\n\r\n      }\r\n    ,\r\n    (error) => {\r\nPromise.reject();\r\n\r\n      return error;\r\n    }\r\n  );\r\n};\r\n//export const getParagraph = (workType,selectedLanguageKey) => (dispatch) => {\r\n  export const getParagraph = () => (dispatch) => {\r\n    return DataFetchService.getParagraph().then(\r\n      (response) => {\r\n        alert(JSON.stringify(response));\r\n        \r\n        if (response.status===200) {\r\n        //  const user=response.data.user;\r\n         // alert(JSON.stringify(user));\r\n        // const languages=getLanguages(oldState,workType,selectedLanguageIndex,response);\r\n          dispatch({\r\n            type: LOAD_PARA,\r\n            payload: {results:response.data.results}\r\n          });\r\n        }\r\n\r\n          Promise.resolve();\r\n          return response;\r\n  \r\n        }\r\n      ,\r\n      (error) => {\r\n \r\n  //Promise.reject();\r\n  \r\n        //return error;\r\n      }\r\n    );\r\n  };\r\n  export const setSelectedLanguage = (argObject) => (dispatch) => {\r\n    return DataFetchService.getParagraph(argObject.results,argObject.workType,\"bangla\").then(\r\n      (response) => {\r\n        \r\n        \r\n        if (response.status===200) {\r\n          alert(JSON.stringify(response));\r\n        //  const user=response.data.user;\r\n         // alert(JSON.stringify(user));\r\n        // const languages=getLanguages(oldState,workType,selectedLanguageIndex,response);\r\n          dispatch({\r\n            type: SETLANGUAGE,\r\n            payload: {selectedLanguage:argObject.selectedLanguage,selectedWorkType:argObject.selectedWorkType,results:[1,2,3]}\r\n          });\r\n        }\r\n\r\n          Promise.resolve();\r\n          return response;\r\n  \r\n        }\r\n      ,\r\n      (error) => {\r\n \r\n  //Promise.reject();\r\n  \r\n        //return error;\r\n      }\r\n    );\r\n  };\r\n  /*\r\n  export const setSelectedLanguage = (argObject) => (dispatch) => {\r\n  dispatch({\r\n    type: SETLANGUAGE,\r\n    payload: {lanIndex:argObject.lanindex,workType:\"Pending\",results:[]}\r\n  });\r\n\r\n}\r\n*/\r\nexport const setWorkType = (argObject) => (dispatch) => {\r\n  dispatch({\r\n    type: SETWORKTYPE,\r\n    payload: {index:argObject.workType}\r\n  });\r\n\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,EAACC,QAAQ,EAACC,UAAU,EAACC,WAAW,EAAEC,WAAW;AAC/D,OAAOC,gBAAgB;AACvB,OAAO,IAAMC,UAAU,GAAC,SAAXA,UAAUA,CAAEC,SAAS;EAAA,OAAG,UAACC,QAAQ,EAAG,CAMjD,CAAC;AAAA;AAED,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAIC,QAAQ,EAACC,QAAQ,EAACC,qBAAqB;EAAA,OAAK,UAACJ,QAAQ,EAAK;IAC/E,OAAOH,gBAAgB,CAACI,MAAM,CAACC,QAAQ,EAACC,QAAQ,EAACC,qBAAqB,CAAC,CAACC,IAAI,CAC1E,UAACC,QAAQ,EAAK;MACZC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAC;MAC/B,IAAIA,QAAQ,CAACI,MAAM,KAAG,GAAG,EAAE;QACzB,IAAMC,IAAI,GAACL,QAAQ,CAACM,IAAI,CAACD,IAAI;QAC7BJ,KAAK,CAACC,IAAI,CAACC,SAAS,CAACE,IAAI,CAAC,CAAC;QAC3BX,QAAQ,CAAC;UACPa,IAAI,EAAEpB,QAAQ;UACdqB,OAAO,EAAER;QACX,CAAC,CAAC;MACJ;MAEES,OAAO,CAACC,OAAO,CAAC,CAAC;MACjB,OAAOV,QAAQ;IAEjB,CAAC,EAEH,UAACW,KAAK,EAAK;MACfF,OAAO,CAACG,MAAM,CAAC,CAAC;MAEV,OAAOD,KAAK;IACd,CACF,CAAC;EACH,CAAC;AAAA;AAEC,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAYA,CAAA;EAAA,OAAS,UAACnB,QAAQ,EAAK;IAC9C,OAAOH,gBAAgB,CAACsB,YAAY,CAAC,CAAC,CAACd,IAAI,CACzC,UAACC,QAAQ,EAAK;MACZC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAC;MAE/B,IAAIA,QAAQ,CAACI,MAAM,KAAG,GAAG,EAAE;QAIzBV,QAAQ,CAAC;UACPa,IAAI,EAAErB,SAAS;UACfsB,OAAO,EAAE;YAACM,OAAO,EAACd,QAAQ,CAACM,IAAI,CAACQ;UAAO;QACzC,CAAC,CAAC;MACJ;MAEEL,OAAO,CAACC,OAAO,CAAC,CAAC;MACjB,OAAOV,QAAQ;IAEjB,CAAC,EAEH,UAACW,KAAK,EAAK,CAKX,CACF,CAAC;EACH,CAAC;AAAA;AACD,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,SAAS;EAAA,OAAK,UAACtB,QAAQ,EAAK;IAC9D,OAAOH,gBAAgB,CAACsB,YAAY,CAACG,SAAS,CAACF,OAAO,EAACE,SAAS,CAACnB,QAAQ,EAAC,QAAQ,CAAC,CAACE,IAAI,CACtF,UAACC,QAAQ,EAAK;MAGZ,IAAIA,QAAQ,CAACI,MAAM,KAAG,GAAG,EAAE;QACzBH,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAC;QAI/BN,QAAQ,CAAC;UACPa,IAAI,EAAElB,WAAW;UACjBmB,OAAO,EAAE;YAACS,gBAAgB,EAACD,SAAS,CAACC,gBAAgB;YAACC,gBAAgB,EAACF,SAAS,CAACE,gBAAgB;YAACJ,OAAO,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC;UAAC;QACnH,CAAC,CAAC;MACJ;MAEEL,OAAO,CAACC,OAAO,CAAC,CAAC;MACjB,OAAOV,QAAQ;IAEjB,CAAC,EAEH,UAACW,KAAK,EAAK,CAKX,CACF,CAAC;EACH,CAAC;AAAA;AAUH,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAWA,CAAIH,SAAS;EAAA,OAAK,UAACtB,QAAQ,EAAK;IACtDA,QAAQ,CAAC;MACPa,IAAI,EAAEjB,WAAW;MACjBkB,OAAO,EAAE;QAACY,KAAK,EAACJ,SAAS,CAACnB;MAAQ;IACpC,CAAC,CAAC;EAEJ,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}