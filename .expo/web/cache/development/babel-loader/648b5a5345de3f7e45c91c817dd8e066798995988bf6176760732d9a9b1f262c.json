{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { SETWORKTYPE } from \"../actions/type\";\nimport fetchReducer from \"./fetch\";\nvar dataReducer = combineReducers({\n  fetchReducer: fetchReducer\n});\nvar workTypeReducer = function workTypeReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n    payload = action.payload;\n  switch (type) {\n    case SETWORKTYPE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedWorkType: payload.workType\n      });\n    default:\n      return dataReducer;\n  }\n};\nexport default workTypeReducer;","map":{"version":3,"names":["SETWORKTYPE","fetchReducer","dataReducer","combineReducers","workTypeReducer","state","arguments","length","undefined","initialState","action","type","payload","_objectSpread","selectedWorkType","workType"],"sources":["C:/Users/vinee/Desktop/BhaashadanWithUserManagement/Bhaashadan/src/reducers/worktype.js"],"sourcesContent":["import { SETWORKTYPE } from \"../actions/type\";\r\nimport fetchReducer from \"./fetch\";\r\n\r\n//const user = null;\r\nconst dataReducer = combineReducers({\r\n  fetchReducer:fetchReducer,\r\n});\r\n const workTypeReducer= (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  \r\nswitch (type) {\r\n  case SETWORKTYPE:\r\n    return{\r\n      ...state, \r\n      selectedWorkType:payload.workType,\r\n    };\r\n    default:\r\n      return dataReducer;\r\n  }\r\n};\r\nexport default workTypeReducer\r\n\r\n"],"mappings":";;;AAAA,SAASA,WAAW;AACpB,OAAOC,YAAY;AAGnB,IAAMC,WAAW,GAAGC,eAAe,CAAC;EAClCF,YAAY,EAACA;AACf,CAAC,CAAC;AACD,IAAMG,eAAe,GAAE,SAAjBA,eAAeA,CAAA,EAAoC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,YAAY;EAAA,IAAEC,MAAM,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACnD,IAAQG,IAAI,GAAcD,MAAM,CAAxBC,IAAI;IAAEC,OAAO,GAAKF,MAAM,CAAlBE,OAAO;EAEvB,QAAQD,IAAI;IACV,KAAKX,WAAW;MACd,OAAAa,aAAA,CAAAA,aAAA,KACKR,KAAK;QACRS,gBAAgB,EAACF,OAAO,CAACG;MAAQ;IAEnC;MACE,OAAOb,WAAW;EACtB;AACF,CAAC;AACD,eAAeE,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}