{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useLayoutEffect, useState } from 'react';\nimport react, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport axios from \"axios\";\nimport CardFrame from \"./cardFrame\";\nimport Styles from \"../constant/GlobalStyles\";\nimport Header from \"./Header\";\nimport Profile from \"./Profile\";\nimport ButtonTypeRadio from \"./ButtonTypeRadio\";\nimport ModalView from \"./ModalView\";\nimport Colors from \"../constant/color\";\nimport { useSelector } from 'react-redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar FlatListView = function FlatListView(props) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var selectedItem = null;\n  function _renderItem(item) {\n    return _jsx(CardFrame, {\n      item: item,\n      workType: state.selectedObject.selectedWorkType,\n      onPress: onCardClick(item)\n    }, item.id);\n  }\n  function onCardClick(item) {\n    if (item) selectedItem = item;else selectedItem = null;\n    setModalVisible({\n      modalVisible: !modalVisible\n    });\n  }\n  return _jsx(View, {\n    children: _jsx(FlatList, {\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      contentContainerStyle: {\n        justifyContent: 'center',\n        flexDirection: 'row',\n        flexWrap: 'wrap'\n      },\n      data: state.selectedObject.results,\n      renderItem: function renderItem(item) {\n        _renderItem(item);\n      },\n      ListEmptyComponent: _jsx(View, {\n        children: _jsx(Text, {\n          children: \" no item to render\"\n        })\n      }),\n      horizontal: false\n    }, function (item) {\n      return item.id;\n    })\n  });\n};\nfunction handleScroll(state) {\n  {}\n}\n;\nexport default FlatListView;","map":{"version":3,"names":["StatusBar","React","useLayoutEffect","useState","react","Component","StyleSheet","Text","View","TouchableOpacity","Modal","FlatList","ActivityIndicator","SafeAreaView","Dimensions","axios","CardFrame","Styles","Header","Profile","ButtonTypeRadio","ModalView","Colors","useSelector","jsx","_jsx","FlatListView","props","_useState","_useState2","_slicedToArray","modalVisible","setModalVisible","selectedItem","_renderItem","item","workType","state","selectedObject","selectedWorkType","onPress","onCardClick","id","children","keyExtractor","contentContainerStyle","justifyContent","flexDirection","flexWrap","data","results","renderItem","ListEmptyComponent","horizontal","handleScroll"],"sources":["C:/Users/vinee/Desktop/BhaashadanWithUserManagement/Bhaashadan/src/customComponent/FlatLIstView.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{useLayoutEffect,useState} from 'react';\nimport react, { Component } from 'react';\nimport { StyleSheet, Text, View,TouchableOpacity,Modal, FlatList, ActivityIndicator,SafeAreaView,Dimensions} from 'react-native';\nimport axios from \"axios\";\n//import { useInfiniteQuery } from 'react-query';\n\nimport CardFrame from './cardFrame';\nimport Styles from '../constant/GlobalStyles'\nimport Header from './Header';\nimport Profile from './Profile';\nimport ButtonTypeRadio from './ButtonTypeRadio';\nimport ModalView from './ModalView';\n\n\nimport Colors from '../constant/color'\nimport { useSelector } from 'react-redux';\n\nconst FlatListView=(props)=>{\n    //const state1 = useSelector((state) => state);\n   // const state = props.stateObject;\n    //const state=state1.selectedObject;\n//    alert(\"state in flatlist\"+JSON.stringify(state));\nconst [modalVisible,setModalVisible]=useState(false);\nvar selectedItem=null;\nfunction _renderItem(item){\n  // alert(item);\n  return (<CardFrame item={item} key={item.id} workType={state.selectedObject.selectedWorkType} onPress={onCardClick(item)}/>)\n}\nfunction onCardClick(item){\n  if(item)\n     selectedItem=item;\n  else\n    selectedItem=null;\n    setModalVisible({modalVisible:!modalVisible})\n}\n    return(\n      <View>\n        <FlatList\n                    //ref={this.flatListRef}\n                    keyExtractor={(item) => item.id}\n                    key={(item)=>item.id}\n                    contentContainerStyle={{ justifyContent: 'center', flexDirection: 'row', flexWrap: 'wrap' }}\n                    data={state.selectedObject.results}\n                    renderItem={(item)=>{_renderItem(item)}}\n                 //  renderItem={(item)=><View><Text>{item.id}</Text></View>}\n                   ListEmptyComponent={<View><Text> no item to render</Text></View>}\n                  // hasMore={state.language.finalObject[state.language.selectedLanguage.key][state.language.selectedWorkType].hasMore}\n                   /*onEndReached={\n                     state.language.finalObject[state.language.selectedLanguage.key][state.language.selectedWorkType].hasMore?\n                     handleScroll.bind(this)\n                    :\n                    \"\"\n                   }\n                   onEndReachedThreshold={\n                     this.state.itemToRender[state.language.selectedLanguage.key][this.state.language.selectedWorkType].hasMore?\n                    0.2\n                    :\n                    0\n                    }\n                    */\n                    //refreshing={refreshing}\n                    horizontal={false}\n                    //onEndReached={this.handleScroll.bind(this)}\n                   // refreshing={this.state.refreshing}\n                 //  getItemLayout={(any,number) => ( {length: 200,offset:(250*((number-1)/numberOfColumn)), index: number})}\n                    //initialScrollIndex={0}\n                  //  initialScrollIndex={this.state.itemToRender[this.state.workType][this.state.selectedLanguage.key].scrollIndex}\n                    //scrollEnabled={true}\n                   // onScroll={this.handleScroll1.bind(this)}\n                   // maxToRenderPerBatch={10}\n                   // numColumns={2}\n                   // style={{width:'100%',flexGrow:1}}\n                    //onMomentumScrollBegin={() => {this.onEndReachedCalledDuringMomentum = false;}}\n                    />\n               {/*     <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                 //   onRequestClose={this.onCardClick.bind(this)} \n                    \n                    >\n                        <ModalView \n                        item={selectedItem}\n                        onPressAction={()=>onCardClick()}\n                        onUploadAction={()=>updateAPICall()}\n                        workType={state.selectedWorkType}\n                        />\n                    </Modal> \n                  */}\n                    </View>\n    )\n};\nfunction handleScroll(state) {\n  //alert(\"hasmore\"+this.state.itemToRender[this.state.workType][this.state.selectedLanguage.key].hasMore)\n    //  if(!this.state.refreshing && this.state.itemToRender[this.state.workType][this.state.selectedLanguage.key].nextPage!=null)\n      {\n         // this.state.itemToRender[this.state.workType][this.state.selectedLanguage.key].scrollIndex=this.pageSize+this.state.itemToRender[this.state.workType][this.state.selectedLanguage.key].scrollIndex;\n          \n         //this.getParagraph({selectedLanguage:state.selectedLanguage,selectedworkType:state.selectedworkType});\n          \n      }\n      \n    };\nexport default FlatListView"],"mappings":";AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,IAAEC,eAAe,EAACC,QAAQ,QAAO,OAAO;AACpD,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,iBAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,UAAA;AAEzC,OAAOC,KAAK,MAAM,OAAO;AAGzB,OAAOC,SAAS;AAChB,OAAOC,MAAM;AACb,OAAOC,MAAM;AACb,OAAOC,OAAO;AACd,OAAOC,eAAe;AACtB,OAAOC,SAAS;AAGhB,OAAOC,MAAM;AACb,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE1C,IAAMC,YAAY,GAAC,SAAbA,YAAYA,CAAEC,KAAK,EAAG;EAK5B,IAAAC,SAAA,GAAqCzB,QAAQ,CAAC,KAAK,CAAC;IAAA0B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CG,YAAY,GAAAF,UAAA;IAACG,eAAe,GAAAH,UAAA;EACnC,IAAII,YAAY,GAAC,IAAI;EACrB,SAASC,WAAWA,CAACC,IAAI,EAAC;IAExB,OAAQV,IAAA,CAACT,SAAS;MAACmB,IAAI,EAAEA,IAAK;MAAeC,QAAQ,EAAEC,KAAK,CAACC,cAAc,CAACC,gBAAiB;MAACC,OAAO,EAAEC,WAAW,CAACN,IAAI;IAAE,GAArFA,IAAI,CAACO,EAAiF,CAAC;EAC7H;EACA,SAASD,WAAWA,CAACN,IAAI,EAAC;IACxB,IAAGA,IAAI,EACJF,YAAY,GAACE,IAAI,CAAC,KAEnBF,YAAY,GAAC,IAAI;IACjBD,eAAe,CAAC;MAACD,YAAY,EAAC,CAACA;IAAY,CAAC,CAAC;EACjD;EACI,OACEN,IAAA,CAACjB,IAAI;IAAAmC,QAAA,EACHlB,IAAA,CAACd,QAAQ;MAEGiC,YAAY,EAAE,SAAAA,aAACT,IAAI;QAAA,OAAKA,IAAI,CAACO,EAAE;MAAA,CAAC;MAEhCG,qBAAqB,EAAE;QAAEC,cAAc,EAAE,QAAQ;QAAEC,aAAa,EAAE,KAAK;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAC5FC,IAAI,EAAEZ,KAAK,CAACC,cAAc,CAACY,OAAQ;MACnCC,UAAU,EAAE,SAAAA,WAAChB,IAAI,EAAG;QAACD,WAAW,CAACC,IAAI,CAAC;MAAA,CAAE;MAEzCiB,kBAAkB,EAAE3B,IAAA,CAACjB,IAAI;QAAAmC,QAAA,EAAClB,IAAA,CAAClB,IAAI;UAAAoC,QAAA,EAAC;QAAkB,CAAM;MAAC,CAAM,CAAE;MAgBhEU,UAAU,EAAE;IAAM,GArBb,UAAClB,IAAI;MAAA,OAAGA,IAAI,CAACO,EAAE;IAAA,CAiCnB;EAAC,CAgBI,CAAC;AAE3B,CAAC;AACD,SAASY,YAAYA,CAACjB,KAAK,EAAE;EAGvB,CAKA;AAEF;AAAC;AACL,eAAeX,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}