{"version":3,"sources":["ReactNativeZoomableViewWithGestures.tsx"],"names":["swipeDirections","SWIPE_UP","SWIPE_DOWN","SWIPE_LEFT","SWIPE_RIGHT","ReactNativeZoomableViewWithGestures","React","Component","e","gestureState","zoomableViewState","props","onShiftingEnd","_couldCallSwipeEvent","swipeDirection","_getSwipeDirection","_triggerSwipeHandlers","onSwipe","onSwipeUp","onSwipeDown","onSwipeLeft","onSwipeRight","swipeMaxZoom","swipeMinZoom","zoomLevel","_validateSwipe","swipeLengthThreshold","dx","dy","_isValidHorizontalSwipe","Math","abs","_isValidVerticalSwipe","vx","swipeVelocityThreshold","swipeDirectionalThreshold","_isValidSwipe","vy","velocity","directionalOffset","render","_onShiftingEnd"],"mappings":"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","sourcesContent":["import {\n  ReactNativeZoomableViewState,\n  ReactNativeZoomableViewWithGesturesProps,\n} from './typings';\nimport React from 'react';\nimport ReactNativeZoomableView from './ReactNativeZoomableView';\n\nexport const swipeDirections = {\n  SWIPE_UP: 'SWIPE_UP',\n  SWIPE_DOWN: 'SWIPE_DOWN',\n  SWIPE_LEFT: 'SWIPE_LEFT',\n  SWIPE_RIGHT: 'SWIPE_RIGHT',\n};\n\nclass ReactNativeZoomableViewWithGestures extends React.Component<\n  ReactNativeZoomableViewWithGesturesProps,\n  ReactNativeZoomableViewState\n> {\n  _onShiftingEnd = (e, gestureState, zoomableViewState) => {\n    if (this.props.onShiftingEnd) {\n      this.props.onShiftingEnd(e, gestureState, zoomableViewState);\n    }\n\n    if (!this._couldCallSwipeEvent(zoomableViewState)) {\n      return;\n    }\n\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    this._triggerSwipeHandlers(swipeDirection, gestureState);\n  };\n\n  /**\n   * Checks if current config options make it possible to process a swipe or if is not necessary\n   *\n   * @returns {*}\n   * @private\n   */\n  _couldCallSwipeEvent(zoomableViewState) {\n    const {\n      onSwipe,\n      onSwipeUp,\n      onSwipeDown,\n      onSwipeLeft,\n      onSwipeRight,\n      swipeMaxZoom,\n      swipeMinZoom,\n    } = this.props;\n\n    if (swipeMaxZoom && zoomableViewState.zoomLevel > swipeMaxZoom) {\n      return false;\n    }\n\n    if (swipeMinZoom && zoomableViewState.zoomLevel < swipeMinZoom) {\n      return false;\n    }\n\n    return onSwipe && onSwipeUp && onSwipeDown && onSwipeLeft && onSwipeRight;\n  }\n\n  /**\n   * Checks the swipe and validates whether we should process it or not\n   *\n   * @param gestureState\n   * @returns {*|boolean}\n   *\n   * @private\n   */\n  _validateSwipe(gestureState) {\n    const { onSwipeUp, onSwipeDown, onSwipeLeft, onSwipeRight } = this.props;\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n\n    return (\n      (onSwipeUp && swipeDirection === SWIPE_UP) ||\n      (onSwipeDown && swipeDirection === SWIPE_DOWN) ||\n      (onSwipeLeft && swipeDirection === SWIPE_LEFT) ||\n      (onSwipeRight && swipeDirection === SWIPE_RIGHT)\n    );\n  }\n\n  /**\n   * Triggers the correct directional callback\n   *\n   * @param swipeDirection\n   * @param gestureState\n   * @private\n   */\n  _triggerSwipeHandlers(swipeDirection, gestureState) {\n    const { onSwipe, onSwipeUp, onSwipeDown, onSwipeLeft, onSwipeRight } =\n      this.props;\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n\n    // trigger the general onswipe callback\n    if (onSwipe) {\n      onSwipe(swipeDirection, gestureState);\n    }\n\n    // trigger the direction specific swipe callback\n    switch (swipeDirection) {\n      case SWIPE_LEFT:\n        onSwipeLeft && onSwipeLeft(gestureState);\n        break;\n      case SWIPE_RIGHT:\n        onSwipeRight && onSwipeRight(gestureState);\n        break;\n      case SWIPE_UP:\n        onSwipeUp && onSwipeUp(gestureState);\n        break;\n      case SWIPE_DOWN:\n        onSwipeDown && onSwipeDown(gestureState);\n        break;\n    }\n  }\n\n  /**\n   * Calculates what direction the user swiped\n   *\n   * @param gestureState\n   * @returns {*}\n   * @private\n   */\n  _getSwipeDirection(gestureState) {\n    const { swipeLengthThreshold } = this.props;\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n    const { dx, dy } = gestureState;\n\n    if (!swipeLengthThreshold) {\n      return;\n    }\n\n    if (this._isValidHorizontalSwipe(gestureState)) {\n      if (Math.abs(dx) > swipeLengthThreshold) {\n        return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;\n      }\n    } else if (this._isValidVerticalSwipe(gestureState)) {\n      if (Math.abs(dy) > swipeLengthThreshold) {\n        return dy > 0 ? SWIPE_DOWN : SWIPE_UP;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks, whether the swipe was done in a horizontal fashion, respecting swipeVelocityThreshold limits\n   *\n   * @param gestureState\n   * @returns {*}\n   *\n   * @private\n   */\n  _isValidHorizontalSwipe(gestureState) {\n    const { vx, dy } = gestureState;\n    const { swipeVelocityThreshold, swipeDirectionalThreshold } = this.props;\n    return this._isValidSwipe(\n      vx,\n      swipeVelocityThreshold,\n      dy,\n      swipeDirectionalThreshold\n    );\n  }\n\n  /**\n   * Checks, whether the swipe was done in a vertical fashion, respecting swipeVelocityThreshold limits\n   *\n   * @param gestureState\n   * @returns {*}\n   *\n   * @private\n   */\n  _isValidVerticalSwipe(gestureState) {\n    const { vy, dx } = gestureState;\n    const { swipeVelocityThreshold, swipeDirectionalThreshold } = this.props;\n    return this._isValidSwipe(\n      vy,\n      swipeVelocityThreshold,\n      dx,\n      swipeDirectionalThreshold\n    );\n  }\n\n  /**\n   * Checks the sipw against velocity and directional offset to make sure it only gets activated, when we actually need it\n   *\n   * @param velocity\n   * @param swipeVelocityThreshold\n   * @param directionalOffset\n   * @param swipeDirectionalThreshold\n   *\n   * @returns {boolean}\n   *\n   * @private\n   */\n  _isValidSwipe(\n    velocity,\n    swipeVelocityThreshold,\n    directionalOffset,\n    swipeDirectionalThreshold\n  ) {\n    return (\n      Math.abs(velocity) > swipeVelocityThreshold &&\n      Math.abs(directionalOffset) < swipeDirectionalThreshold\n    );\n  }\n\n  render() {\n    return (\n      <ReactNativeZoomableView\n        {...this.props}\n        onShiftingEnd={this._onShiftingEnd}\n      />\n    );\n  }\n}\n/*\nTODO: Remove this when typescript is proven to work\nReactNativeZoomableViewWithGestures.propTypes = {\n  swipeLengthThreshold: PropTypes.number,\n  swipeVelocityThreshold: PropTypes.number,\n  swipeDirectionalThreshold: PropTypes.number,\n  swipeMinZoom: PropTypes.number,\n  swipeMaxZoom: PropTypes.number,\n  swipeDisabled: PropTypes.bool,\n  onSwipe: PropTypes.func,\n  onSwipeUp: PropTypes.func,\n  onSwipeDown: PropTypes.func,\n  onSwipeLeft: PropTypes.func,\n  onSwipeRight: PropTypes.func,\n};\n\nReactNativeZoomableViewWithGestures.defaultProps = {\n  swipeLengthThreshold: 0,\n  swipeVelocityThreshold: 0.1,\n  swipeDirectionalThreshold: 120,\n  swipeMinZoom: null,\n  swipeMaxZoom: null,\n  swipeDisabled: false,\n  onSwipe: null,\n  onSwipeUp: null,\n  onSwipeDown: null,\n  onSwipeLeft: null,\n  onSwipeRight: null,\n};\n */\nexport default ReactNativeZoomableViewWithGestures;\n"]}