{"version":3,"sources":["calcNewScaledOffsetForZoomCentering.ts"],"names":["calcNewScaledOffsetForZoomCentering","oldOffsetXOrYScaled","zoomSubjectOriginalWidthOrHeight","oldScale","newScale","zoomCenterXOrY","oldOffSetUnscaled","growthRate","zoomSubjectOriginalCenter","zoomSubjectCurrentCenter","zoomSubjectNewCenter","xOrY","distanceToZoomCenter","newOffsetUnscaled"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mCAAT,CACLC,mBADK,EAELC,gCAFK,EAGLC,QAHK,EAILC,QAJK,EAKLC,cALK,EAML;AACA,QAAMC,iBAAiB,GAAGL,mBAAmB,GAAGE,QAAhD;AACA,QAAMI,UAAU,GAAGH,QAAQ,GAAGD,QAA9B,CAFA,CAIA;;AACA,QAAMK,yBAAyB,GAAG,EAAlC;AACA,QAAMC,wBAAwB,GAAG,EAAjC;AACA,QAAMC,oBAAoB,GAAG,EAA7B;AAEAF,EAAAA,yBAAyB,CAACG,IAA1B,GAAiCT,gCAAgC,GAAG,CAApE;AACAO,EAAAA,wBAAwB,CAACE,IAAzB,GACEH,yBAAyB,CAACG,IAA1B,GAAiCL,iBADnC;AAEAG,EAAAA,wBAAwB,CAACG,oBAAzB,GACEH,wBAAwB,CAACE,IAAzB,GAAgCN,cADlC;AAGAK,EAAAA,oBAAoB,CAACE,oBAArB,GACEH,wBAAwB,CAACG,oBAAzB,GAAgDL,UADlD;AAEAG,EAAAA,oBAAoB,CAACC,IAArB,GACED,oBAAoB,CAACE,oBAArB,GAA4CP,cAD9C;AAGA,QAAMQ,iBAAiB,GACrBH,oBAAoB,CAACC,IAArB,GAA4BH,yBAAyB,CAACG,IADxD;AAGA,SAAOE,iBAAiB,GAAGT,QAA3B;AACD","sourcesContent":["/**\n * Calculates the new offset for the zoomSubject to ensure zoom center position is retained after zooming.\n * Parameters should correspond to whether we need the offset for the X or Y axis\n *\n * ## Terms Used:\n *\n * - Zoom Subject: the view that's being zoomed and panned\n * - Zoom Center: the point whose relative position to the window is retained\n * - Unscaled: a measurement in pixels denoting the true size as observed by the users' eyes\n * - Scaled: a measurement in pixels scaled to the \"scale transformation\" of the zoom subject to match with its true size.\n *  *For example:*\n *   If the scale on the zoom subject is 0.5,\n *   then to draw an actual 4px line on the zoom subject, we need to scale it to 4px / 0.5 = 8px\n *   8px is the scaled measurement\n *\n * ## Overall idea of this algorithm:\n *\n * When users perform zooming by pinching the screen,\n * we need to shift the zoom subject so that the position of the zoom center is always the same.\n * The offset amount to shift the layer is the returned value.\n *\n *\n * ## How we achieve our goal:\n *\n * To retain, the zoom center position, whenever a zoom action is performed,\n * we just need to make sure the distances from all the points in the zoom subject\n * to the zoom center increases or decreases by the growth rate of the scale.\n *\n * ```\n * newDistanceAnyPointToZoomCenter = oldDistanceAnyPointToZoomCenter * (newScale/oldScale)\n * ```\n *\n * We can't calculate that for all the points because there are unlimited points on a plain.\n * However, due to the way `transform` works in RN, every point is scaled from the zoom subject center.\n * Therefore, it's sufficient to base our calculation on the distance from the zoom subject center to the zoom center.\n *\n * ```\n * newDistanceZoomSubjectCenterToZoomCenter = oldDistanceZoomSubjectCenterToZoomCenter * (newScale/oldScale)\n * ```\n *\n * Once we have `newDistanceZoomSubjectCenterToZoomCenter`,\n * we can easily calculate the position of the new center, which leads us to the offset amount.\n * Refer to the code for more details\n *\n * @param oldOffsetXOrYScaled\n * @param zoomSubjectOriginalWidthOrHeight\n * @param oldScale\n * @param newScale\n * @param zoomCenterXOrY\n */\nexport function calcNewScaledOffsetForZoomCentering(\n  oldOffsetXOrYScaled: number,\n  zoomSubjectOriginalWidthOrHeight: number,\n  oldScale: number,\n  newScale: number,\n  zoomCenterXOrY: number\n) {\n  const oldOffSetUnscaled = oldOffsetXOrYScaled * oldScale;\n  const growthRate = newScale / oldScale;\n\n  // these act like namespaces just for the sake of readability\n  const zoomSubjectOriginalCenter = {} as Center;\n  const zoomSubjectCurrentCenter = {} as Center;\n  const zoomSubjectNewCenter = {} as Center;\n\n  zoomSubjectOriginalCenter.xOrY = zoomSubjectOriginalWidthOrHeight / 2;\n  zoomSubjectCurrentCenter.xOrY =\n    zoomSubjectOriginalCenter.xOrY + oldOffSetUnscaled;\n  zoomSubjectCurrentCenter.distanceToZoomCenter =\n    zoomSubjectCurrentCenter.xOrY - zoomCenterXOrY;\n\n  zoomSubjectNewCenter.distanceToZoomCenter =\n    zoomSubjectCurrentCenter.distanceToZoomCenter * growthRate;\n  zoomSubjectNewCenter.xOrY =\n    zoomSubjectNewCenter.distanceToZoomCenter + zoomCenterXOrY;\n\n  const newOffsetUnscaled =\n    zoomSubjectNewCenter.xOrY - zoomSubjectOriginalCenter.xOrY;\n\n  return newOffsetUnscaled / newScale;\n}\n\ninterface Center {\n  xOrY: number;\n  distanceToZoomCenter: number;\n}\n"]}