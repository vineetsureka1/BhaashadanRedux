{"version":3,"sources":["index.ts"],"names":["SwipeDirection"],"mappings":";;;;;;IAOYA,c;;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c","sourcesContent":["import {\n  Animated,\n  GestureResponderEvent,\n  PanResponderGestureState,\n  ViewProps,\n} from 'react-native';\n\nexport enum SwipeDirection {\n  SWIPE_UP = 'SWIPE_UP',\n  SWIPE_DOWN = 'SWIPE_DOWN',\n  SWIPE_LEFT = 'SWIPE_LEFT',\n  SWIPE_RIGHT = 'SWIPE_RIGHT',\n}\n\nexport interface ZoomableViewEvent {\n  zoomLevel: number;\n  offsetX: number;\n  offsetY: number;\n  originalHeight: number;\n  originalWidth: number;\n  originalPageX: number;\n  originalPageY: number;\n}\n\nexport interface ReactNativeZoomableViewProps extends ViewProps {\n  // options\n  zoomEnabled?: boolean;\n  initialZoom?: number;\n  initialOffsetX?: number;\n  initialOffsetY?: number;\n  contentWidth?: number;\n  contentHeight?: number;\n  panBoundaryPadding?: number;\n  maxZoom?: number;\n  minZoom?: number;\n  doubleTapDelay?: number;\n  doubleTapZoomToCenter?: boolean;\n  bindToBorders?: boolean;\n  zoomStep?: number;\n  pinchToZoomInSensitivity?: number;\n  pinchToZoomOutSensitivity?: number;\n  movementSensibility?: number;\n  longPressDuration?: number;\n  visualTouchFeedbackEnabled?: boolean;\n  disablePanOnInitialZoom?: boolean;\n  style?: any;\n\n  // Zoom animated value ref\n  zoomAnimatedValue?: Animated.Value;\n  panAnimatedValueXY?: Animated.ValueXY;\n\n  // debug\n  debug?: boolean;\n\n  // callbacks\n  onTransform?: (zoomableViewEventObject: ZoomableViewEvent) => void;\n  onSingleTap?: (\n    event: GestureResponderEvent,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onDoubleTapBefore?: (\n    event: GestureResponderEvent,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onDoubleTapAfter?: (\n    event: GestureResponderEvent,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onShiftingBefore?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => boolean;\n  onShiftingAfter?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => boolean;\n  onShiftingEnd?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onZoomBefore?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => boolean | void;\n  onZoomAfter?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onZoomEnd?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onLongPress?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onStartShouldSetPanResponder?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent,\n    baseComponentResult: boolean\n  ) => boolean;\n  onPanResponderGrant?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onPanResponderEnd?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onPanResponderMove?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => boolean;\n  onPanResponderTerminate?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => void;\n  onPanResponderTerminationRequest?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => boolean;\n  onShouldBlockNativeResponder?: (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState,\n    zoomableViewEventObject: ZoomableViewEvent\n  ) => boolean;\n}\n\nexport interface Vec2D {\n  x: number;\n  y: number;\n}\n\nexport interface TouchPoint extends Vec2D {\n  id: string;\n  isSecondTap?: boolean;\n}\n\nexport interface ReactNativeZoomableViewState {\n  touches: TouchPoint[];\n  originalWidth: number;\n  originalHeight: number;\n  originalPageX: number;\n  originalPageY: number;\n  debugPoints: undefined | Vec2D[];\n}\n\nexport interface ReactNativeZoomableViewWithGesturesProps\n  extends ReactNativeZoomableViewProps {\n  swipeLengthThreshold?: number;\n  swipeVelocityThreshold?: number;\n  swipeDirectionalThreshold?: number;\n  swipeMinZoom?: number;\n  swipeMaxZoom?: number;\n  swipeDisabled?: boolean;\n  onSwipe?: (\n    swipeDirection: SwipeDirection,\n    gestureState: PanResponderGestureState\n  ) => void;\n  onSwipeUp?: (gestureState: PanResponderGestureState) => void;\n  onSwipeDown?: (gestureState: PanResponderGestureState) => void;\n  onSwipeLeft?: (gestureState: PanResponderGestureState) => void;\n  onSwipeRight?: (gestureState: PanResponderGestureState) => void;\n}\n"]}