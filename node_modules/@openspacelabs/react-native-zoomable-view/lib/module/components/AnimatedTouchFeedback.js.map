{"version":3,"sources":["AnimatedTouchFeedback.tsx"],"names":["React","useEffect","useRef","Animated","Easing","StyleSheet","AnimatedTouchFeedback","x","y","animationDelay","animationDuration","onAnimationDone","appearDisappearAnimRef","Value","self","current","setValue","inDuration","outDuration","sequence","timing","delay","toValue","duration","easing","linear","useNativeDriver","out","ease","start","styles","animatedTouchFeedback","opacity","interpolate","inputRange","outputRange","left","top","transform","scale","create","width","height","borderRadius","backgroundColor","position"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Animated, Easing, StyleSheet } from 'react-native';\n\nexport const AnimatedTouchFeedback = ({\n  x,\n  y,\n  animationDelay,\n  animationDuration,\n  onAnimationDone,\n}: {\n  x: number;\n  y: number;\n  animationDuration: number;\n  animationDelay?: number;\n  onAnimationDone?(): void;\n}) => {\n  const appearDisappearAnimRef = useRef<Animated.Value>(new Animated.Value(0));\n  const self = useRef<any>({});\n  self.current.onAnimationDone = onAnimationDone;\n\n  useEffect(() => {\n    appearDisappearAnimRef.current.setValue(0);\n    const inDuration = animationDuration * 0.8;\n    const outDuration = animationDuration - inDuration;\n    Animated.sequence([\n      Animated.timing(appearDisappearAnimRef.current, {\n        delay: animationDelay || 0,\n        toValue: 1,\n        duration: inDuration,\n        easing: Easing.linear,\n        useNativeDriver: true,\n      }),\n      Animated.timing(appearDisappearAnimRef.current, {\n        toValue: 0,\n        duration: outDuration,\n        easing: Easing.out(Easing.ease),\n        useNativeDriver: true,\n      }),\n    ]).start(self.current.onAnimationDone);\n  }, [animationDelay, animationDuration]);\n\n  return (\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        styles.animatedTouchFeedback,\n        {\n          opacity: appearDisappearAnimRef.current.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, 0.3],\n          }),\n          left: x - 20,\n          top: y - 20,\n          transform: [\n            {\n              scale: appearDisappearAnimRef.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  animatedTouchFeedback: {\n    width: 40,\n    height: 40,\n    borderRadius: 40,\n    backgroundColor: 'lightgray',\n    position: 'absolute',\n  },\n});\n"]}