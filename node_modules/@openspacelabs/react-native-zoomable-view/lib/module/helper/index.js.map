{"version":3,"sources":["index.ts"],"names":["calcNewScaledOffsetForZoomCentering","calcGestureCenterPoint","e","gestureState","touches","nativeEvent","numberActiveTouches","x","pageX","y","pageY","calcGestureTouchDistance","dx","Math","abs","dy","sqrt"],"mappings":"AAGA,SAASA,mCAAT,QAAoD,uCAApD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CACLC,CADK,EAELC,YAFK,EAGS;AAAA;;AACd,QAAMC,OAAO,GAAGF,CAAH,aAAGA,CAAH,yCAAGA,CAAC,CAAEG,WAAN,mDAAG,eAAgBD,OAAhC;AACA,MAAI,CAACA,OAAO,CAAC,CAAD,CAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAID,YAAY,CAACG,mBAAb,KAAqC,CAAzC,EAA4C;AAC1C,QAAI,CAACF,OAAO,CAAC,CAAD,CAAZ,EAAiB,OAAO,IAAP;AACjB,WAAO;AACLG,MAAAA,CAAC,EAAE,CAACH,OAAO,CAAC,CAAD,CAAP,CAAWI,KAAX,GAAmBJ,OAAO,CAAC,CAAD,CAAP,CAAWI,KAA/B,IAAwC,CADtC;AAELC,MAAAA,CAAC,EAAE,CAACL,OAAO,CAAC,CAAD,CAAP,CAAWM,KAAX,GAAmBN,OAAO,CAAC,CAAD,CAAP,CAAWM,KAA/B,IAAwC;AAFtC,KAAP;AAID;;AACD,MAAIP,YAAY,CAACG,mBAAb,KAAqC,CAAzC,EAA4C;AAC1C,WAAO;AACLC,MAAAA,CAAC,EAAEH,OAAO,CAAC,CAAD,CAAP,CAAWI,KADT;AAELC,MAAAA,CAAC,EAAEL,OAAO,CAAC,CAAD,CAAP,CAAWM;AAFT,KAAP;AAID;;AAED,SAAO,IAAP;AACD;AAED,OAAO,SAASC,wBAAT,CACLT,CADK,EAELC,YAFK,EAGU;AAAA;;AACf,QAAMC,OAAO,GAAGF,CAAH,aAAGA,CAAH,0CAAGA,CAAC,CAAEG,WAAN,oDAAG,gBAAgBD,OAAhC;AACA,MAAID,YAAY,CAACG,mBAAb,KAAqC,CAArC,IAA0C,CAACF,OAAO,CAAC,CAAD,CAAlD,IAAyD,CAACA,OAAO,CAAC,CAAD,CAArE,EACE,OAAO,IAAP;AAEF,QAAMQ,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASV,OAAO,CAAC,CAAD,CAAP,CAAWI,KAAX,GAAmBJ,OAAO,CAAC,CAAD,CAAP,CAAWI,KAAvC,CAAX;AACA,QAAMO,EAAE,GAAGF,IAAI,CAACC,GAAL,CAASV,OAAO,CAAC,CAAD,CAAP,CAAWM,KAAX,GAAmBN,OAAO,CAAC,CAAD,CAAP,CAAWM,KAAvC,CAAX;AACA,SAAOG,IAAI,CAACG,IAAL,CAAUJ,EAAE,GAAGA,EAAL,GAAUG,EAAE,GAAGA,EAAzB,CAAP;AACD","sourcesContent":["import { GestureResponderEvent, PanResponderGestureState } from 'react-native';\nimport { Vec2D } from '../typings';\n\nexport { calcNewScaledOffsetForZoomCentering } from './calcNewScaledOffsetForZoomCentering';\n\n/**\n * Calculates the gesture center point relative to the page coordinate system\n *\n * We're unable to use touch.locationX/Y\n * because locationX uses the axis system of the leaf element that the touch occurs on,\n * which makes it even more complicated to translate into our container's axis system.\n *\n * We're also unable to use gestureState.moveX/Y\n * because gestureState.moveX/Y is messed up on real device\n * (Sometimes it's the center point, but sometimes it randomly takes the position of one of the touches)\n */\nexport function calcGestureCenterPoint(\n  e: GestureResponderEvent,\n  gestureState: PanResponderGestureState\n): Vec2D | null {\n  const touches = e?.nativeEvent?.touches;\n  if (!touches[0]) return null;\n\n  if (gestureState.numberActiveTouches === 2) {\n    if (!touches[1]) return null;\n    return {\n      x: (touches[0].pageX + touches[1].pageX) / 2,\n      y: (touches[0].pageY + touches[1].pageY) / 2,\n    };\n  }\n  if (gestureState.numberActiveTouches === 1) {\n    return {\n      x: touches[0].pageX,\n      y: touches[0].pageY,\n    };\n  }\n\n  return null;\n}\n\nexport function calcGestureTouchDistance(\n  e: GestureResponderEvent,\n  gestureState: PanResponderGestureState\n): number | null {\n  const touches = e?.nativeEvent?.touches;\n  if (gestureState.numberActiveTouches !== 2 || !touches[0] || !touches[1])\n    return null;\n\n  const dx = Math.abs(touches[0].pageX - touches[1].pageX);\n  const dy = Math.abs(touches[0].pageY - touches[1].pageY);\n  return Math.sqrt(dx * dx + dy * dy);\n}\n"]}